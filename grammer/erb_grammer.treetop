grammar ERBGrammer
        rule erb
             ( erb_string /
               erb_block  / 
               ignorable_script_tag_content /
               html_end_tag / 
               html_start_tag / 
               html_self_contained / 
               whitespace / 
               text 
             ) (erb)*
        end

        rule erb_string
             start_erb:erb_string_start start_space:(space) text:(double_quoted_ruby_string)?  everything_else:(!erb_block_end .)* end_erb:(erb_block_end) <NonTextNode>
             {
                def shattered_elements
                    [start_erb, start_space, text, HerbNonTextNode.new(everything_else.text_value), end_erb].reject {|terminal| terminal.nil? || terminal.text_value.empty? }
                end

                def shatter?
                   true
                end

                def node_name
                    "erb_string"
                end

             }

        end
        
        rule double_quoted_ruby_string
        '"' unquoted_text:((!'"' .)*) '"' <TextNode>
             {
                def can_be_combined?
                    false
                end
                
                def html?
                    false
                end

                def text_value
                    unquoted_text.text_value            
                end

                def node_name
                    "double_quoted_ruby_string"
                end
             }

        end

        rule erb_block
             '<%' (!erb_block_end .)* erb_block_end <NonTextNode>
             {
                def node_name
                    "erb_block"
                end
             }

        end
        
        rule erb_string_start
           '<%=' <NonTextNode>
             {
                def node_name
                    "erb_string_start"
                end
             }

        end

        rule erb_block_end
             ('%>' / '-%>') <NonTextNode>
             {
                def node_name
                    "erb_block_end"
                end
             }

        end

        rule ignorable_script_tag_content
             '<script' (!'</script' .)+ <IgnorableTagNode>
             {
                def can_be_combined?
                    false
                end

                def node_name
                   "ignorable_tag_name"
                end
             }
        end


        rule html_self_contained
             '<' tag_name:([a-zA-Z])+ (!'/>' (erb_string / .))* '/>' <NonTextNode> 
             {
                def can_be_combined?
                   true
                end

                def node_name
                    "html_self_contained"
                end
             }
        end     

        rule html_end_tag
             '</' tag_name:([a-zA-Z])+ (!'>' .)* '>' <NonTextNode>
             {
                def can_be_combined?
                    !(['a', 'b'].index(tag_name.text_value.downcase).nil?)
                end

                def node_name
                    "html_end_tag"
                end
             }

        end
        
        rule tag_text
            (!'>' !'/>' (erb_string / .) ) <NonTextNode>
            {
              def text_value
                 "tag text"
               end
            }
        end

        rule html_start_tag
             '<'  tag_name:([a-zA-Z])+  tag_text* '>' <NonTextNode>
             {
                def can_be_combined?
                    !(['a', 'b'].index(tag_name.text_value.downcase).nil?)
                end

                def node_name
                    "html_start_tag"
                end
             }

        end     

        rule text
             ((!html_self_contained !html_start_tag !html_end_tag !erb_string !erb_block) . )+ <TextNode>
             {
                def can_be_combined?
                    true
                end

                def node_name
                    "text"
                end
             }

        end

        rule space
           (' ')+ <NonTextNode>
           {
                      def node_name
                         "space"
                      end
           }
        end

        rule whitespace
            ((![a-zA-Z] !('<' [a-zA-Z]+) !('</' [a-zA-Z]+) !'<%' ) . )+ <NonTextNode>
            {
                def can_be_combined?
                   true
                end
               
               def node_name    
                    "whitespace"
               end
               def white_space?
                  true
               end
            }
        end
        
end
        