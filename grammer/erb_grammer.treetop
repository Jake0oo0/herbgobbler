grammar ERBGrammer
        rule erb
             ( erb_string /
               erb_block  / 
               ignorable_script_tag_content /
               html_end_tag / 
               html_start_tag / 
               html_self_contained / 
               whitespace / 
               text 
             ) (erb)*
        end

        rule erb_string_non_text_content
             (!erb_block_end .)* <ErbStringNonTextContent>
             {
                def can_be_combined?
                    true
                end
             }
        end

        rule erb_string
             start_erb:erb_string_start start_space:(space) text:(double_quoted_ruby_string)?  everything_else:erb_string_non_text_content end_erb:(erb_block_end) <NonTextNode>
             {
                def node_name
                    "erb_string"
                end
             }

        end
        
        rule string_variable 
             '#{' variable:((!'}' .)*) '}' <HerbStringVariable>
        end

        rule double_quoted_ruby_string
        start_quote:'"' unquoted_text:((!'"' (string_variable / .))*) end_quote:'"' <DoubleQuotedTextNode>
             {
                def can_be_combined?
                    false
                end
                
                def html?
                    false
                end 
                
                def text_value
                    self.elements.inject("") { |text, node| text += node.text_value }
                end

                def node_name
                    "double_quoted_ruby_string"
                end
             }

        end

        rule erb_block
             start_block:'<%' block_contents:((!erb_block_end .)*) end_block:erb_block_end <NonTextNode>
             {
                def node_name
                    "erb_block"
                end
             }

        end
        
        rule erb_string_start
           '<%=' <NonExtractingNonTextNode>
             {
                def node_name
                    "erb_string_start"
                end
                
                def can_be_combined?
                    true
                end
             }

        end

        rule erb_block_end
             ('%>' / '-%>') <NonExtractingNonTextNode>
             {
                def node_name
                    "erb_block_end"
                end

                def can_be_combined?
                    true
                end

             }

        end

        rule ignorable_script_tag_content
             '<script' (!'</script' .)+ <IgnorableTagNode>
             {
                def can_be_combined?
                    false
                end

                def node_name
                   "ignorable_tag_name"
                end
             }
        end


        rule html_self_contained
             start_tag:'<' tag_name:([a-zA-Z])+ tag_contents:(!'/>' (erb_string / .))* end_tag:'/>' <NonTextNode> 
             {
                def can_be_combined?
                   true
                end

                def node_name
                    "html_self_contained"
                end

             }
        end     

        rule html_end_tag
             '</' tag_name:([a-zA-Z])+ (!'>' .)* '>' <NonTextNode>
             {
                def can_be_combined?
                    !(['a', 'b', 'span'].index(tag_name.text_value.downcase).nil?)
                end

                def node_name
                    "html_end_tag"
                end
             }

        end
        
        rule tag_text
            (!'>' !'/>' (erb_string / .) )* <NonTextNode>
            {
               def node_name
                   "tag_text"
               end
            }
        end

        rule html_start_tag
             start_bracket:'<'  tag_name:([a-zA-Z])+  extra_text:tag_text end_bracket:'>' <NonTextNode>
             {
                def can_be_combined?
                    !(['a', 'b', 'span'].index(tag_name.text_value.downcase).nil?)
                end

                def node_name
                    "html_start_tag"
                end
             }

        end     

        rule text
             ((!html_self_contained !html_start_tag !html_end_tag !erb_string !erb_block) . )+ <TextNode>
             {
                def can_be_combined?
                    true
                end

                def node_name
                    "text"
                end
             }

        end

        rule space
           (' ')+ <NonTextNode>
           {
                      def node_name
                         "space"
                      end

                      def can_be_combined?
                          true
                      end                      
           }
        end

        rule whitespace
            ((![a-zA-Z] !('<' [a-zA-Z]+) !('</' [a-zA-Z]+) !'<%' ) . )+ <NonTextNode>
            {
                def can_be_combined?
                   true
                end
               
               def node_name    
                    "whitespace"
               end
               def white_space?
                  true
               end
            }
        end
        
end
        